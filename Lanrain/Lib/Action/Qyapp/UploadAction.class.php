<?php/**Administrator*2014-4-3*/class UploadAction extends Action{	private $php_path;	private $php_url;	private $save_path;	private $save_url;	private $ext_arr;	private $file_type;	private $save_name;	private $max_size;	private $is_url;	function __construct()	{		$php_path=str_replace('\\', '/',dirname(__FILE__));				$this->php_path=substr($php_path,0,strlen($php_path)-24);					$this->php_url=str_replace('\\', '/',dirname($_SERVER['PHP_SELF']));				$this->save_path=$this->php_path.'/Uploads/File/';		$this->save_url=$this->php_url.'Uploads/File/';		$this->ext_arr=array(			'image' => array('jpg'),				'file' => array('mp4'),		);		$this->file_type='image';		$this->save_name=date("YmdHis").rand(100,999);		$this->max_size=20000000;		$this->is_url=true;			}		function index()	{		if(empty($_FILES))			$this->alert('请选择文件');		else		{			$type=$this->_get("file_type");						$file_url=$this->uploadFile($_FILES["imgFile"]);			if($file_url)				return $file_url;			else 				$this->alert('上传失败');		} 				}	function ajaxUpload()	{		if(empty($_FILES))			$this->error('请选择文件');		else		{			$this->save_path=$this->php_path.'TempFile/';			$this->save_url=$this->php_url.'TempFile/';						$this->is_url=$this->_get('is_url','trim',$this->is_url);			$this->file_type=$this->_get('file_type','trim',$this->file_type);							$file_url=$this->uploadFile($_FILES["imgFile"]);			if($file_url)				$this->ajaxReturn(array('error'=>0,'url'=>$file_url['file_url'],'title'=>$file_url['id']));			else				$this->ajaxReturn(array('error'=>1,'url'=>'','title'=>''));		}	}		private function uploadFile($_file)	{							if (!empty($_file['error'])) 		{			switch($_file['error'])			{				case '1':					$error = '超过php.ini允许的大小。';					break;				case '2':					$error = '超过表单允许的大小。';					break;				case '3':					$error = '图片只有部分被上传。';					break;				case '4':					$error = '请选择图片。';					break;				case '6':					$error = '找不到临时目录。';					break;				case '7':					$error = '写文件到硬盘出错。';					break;				case '8':					$error = 'File upload stopped by extension。';					break;				case '999':				default:					$error = '未知错误。';			}			$this->alert($error);		}				if (empty($_file) === false)		{						//原文件名			$file_name = $_file['name'];			//服务器上临时文件名			$tmp_name = $_file['tmp_name'];			//文件大小			$file_size = $_file['size'];			//检查文件名			if (!$file_name) {				$this->alert("请选择文件。");			}			//检查目录			if (@is_dir($this->save_path) === false) {				$this->alert("上传目录不存在。");			}			//检查目录写权限			if (@is_writable($this->save_path) === false) {				$this->alert("上传目录没有写权限。");			}			//检查是否已上传			if (@is_uploaded_file($tmp_name) === false) {				$this->alert("上传失败。");			}			//检查文件大小			if ($file_size > $this->max_size) {				$this->alert("上传文件大小超过限制。");			}			//检查目录名			$dir_name = empty($this->file_type) ? 'image' : trim($this->file_type);			if (empty($this->ext_arr[$dir_name])) 			{				$this->alert("目录名不正确。");			}						//获得文件扩展名			$temp_arr = explode(".", $file_name);			$file_ext = array_pop($temp_arr);			$file_ext = trim($file_ext);			$file_ext = strtolower($file_ext);			//检查扩展名			if (in_array($file_ext, $this->ext_arr[$dir_name]) === false) 			{				$this->alert("上传文件扩展名是不允许的扩展名。\n只允许" . implode(",", $this->ext_arr[$dir_name]) . "格式。");			}			//$this->alert($file_ext);			//创建文件夹						if ($dir_name !== '')			{				$this->save_path.=$dir_name."/";				$this->save_url.= $dir_name ."/";				if (!file_exists($this->save_path)) 				{					mkdir($this->save_path);				}			}			//$this->save_path .=date("Y").'/'.date('m').'/'.date('d').'/';			//$this->save_url .=date("Y").'/'.date('m').'/'.date('d').'/';						if (!file_exists($this->save_path)) 			{					mkdir($this->save_path);							}								//新文件名			$new_file_name=$this->save_name.'.'.$file_ext;			//移动文件			$file_path = $this->save_path .$new_file_name;			if (move_uploaded_file($tmp_name,$file_path) === false) {				$this->alert("上传文件失败。");			}						@chmod($file_path, 0644);			$file_url = $this->save_url.$new_file_name;			if($this->is_url)				$file_url='http://'.$_SERVER["HTTP_HOST"].$file_url;			/*  去除地址多余字符  */			$file_url=str_replace('index.php/Home/Upload/ajaxUpload/is_url/1/file_type','',$file_url);			//远程文件			//$fileup=$this->file_post($file_url);						//把图片上传到微信服务器获取med_id			if($_SESSION['user_id']){				$user=M('qytoken')->where(array('id'=>$_SESSION['user_id']))->find();				$access_token=$this->access_token($user['corpid'],$user['corpsecret']);				$url_post='https://qyapi.weixin.qq.com/cgi-bin/media/upload?access_token='.$access_token['access_token'].'&type=image';				$data['media']="@".$file_path;				$post=$this->https_request($url_post,$data);				$post=json_decode($post,true);				$id=M('Qyimg')->add(array(					'user_id'=>$_SESSION['user_id'],					'media_id'=>$post['media_id'],					'created_time'=>$post['created_at'],					'pic'=>$file_url,				));				$returndata['file_url']=$file_url;				$returndata['id']=$id;			}else{				$this->alert("与微信对接失败,请确认上传图片是否为jpg格式");			}						return $returndata;		}	}		private function alert($msg)	{		$this->ajaxReturn(array('error' => 1, 'message' =>$msg));	}	public function file_post($file_url)	{		$post_data =  array('file'=>$file_url);		$map['host']  = array('neq','http://xingceshi.wxopen.cn');		$uphost=M('Uphost')->where($map)->select();		foreach($uphost as $k=>$v){			$url=$v['host']."/TempFile/file/get.php";			$ch = curl_init();  			curl_setopt($ch, CURLOPT_POST, 1);  			curl_setopt($ch, CURLOPT_URL,$url);  			curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);  			curl_exec($ch); 			curl_close ($ch);		}					}	function https_request($url, $data = null)		{			$curl = curl_init();			curl_setopt($curl, CURLOPT_URL, $url);			curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);			curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);			if (!empty($data)){				curl_setopt($curl, CURLOPT_POST, 1);				curl_setopt($curl, CURLOPT_POSTFIELDS, $data);			}			curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);			$output = curl_exec($curl);			curl_close($curl);			return $output;		}						public function access_token($api,$secret){		$url_get='https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid='.$api.'&corpsecret='.$secret;		$json=json_decode($this->curlGet($url_get), true);		return $json;	}		function curlGet($url){		$ch = curl_init();		$header = "Accept-Charset: utf-8";		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);		curl_setopt($ch, CURLOPT_HTTPHEADER, $header);		curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)');		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);		curl_setopt($ch, CURLOPT_AUTOREFERER, 1);				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		$temp = curl_exec($ch);		return $temp;	}		}?>